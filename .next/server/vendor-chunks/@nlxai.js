"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@nlxai";
exports.ids = ["vendor-chunks/@nlxai"];
exports.modules = {

/***/ "(ssr)/./node_modules/@nlxai/chat-core/lib/index.esm.js":
/*!********************************************************!*\
  !*** ./node_modules/@nlxai/chat-core/lib/index.esm.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createConversation: () => (/* binding */ createConversation),\n/* harmony export */   getCurrentExpirationTimestamp: () => (/* binding */ getCurrentExpirationTimestamp),\n/* harmony export */   promisify: () => (/* binding */ promisify),\n/* harmony export */   shouldReinitialize: () => (/* binding */ shouldReinitialize)\n/* harmony export */ });\n/* harmony import */ var isomorphic_fetch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! isomorphic-fetch */ \"(ssr)/./node_modules/isomorphic-fetch/fetch-npm-node.js\");\n/* harmony import */ var reconnecting_websocket__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! reconnecting-websocket */ \"(ssr)/./node_modules/reconnecting-websocket/dist/reconnecting-websocket-mjs.js\");\n/* harmony import */ var ramda__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ramda */ \"(ssr)/./node_modules/ramda/es/equals.js\");\n/* harmony import */ var ramda__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ramda */ \"(ssr)/./node_modules/ramda/es/adjust.js\");\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! uuid */ \"(ssr)/./node_modules/uuid/dist/esm-node/v4.js\");\n\n\n\n\n\nvar name = \"@nlxai/chat-core\";\nvar version = \"0.1.53\";\nvar description = \"NLX Chat SDK core\";\nvar type = \"module\";\nvar main = \"lib/index.cjs\";\nvar module = \"lib/index.esm.js\";\nvar browser = \"lib/index.umd.js\";\nvar types = \"lib/index.d.ts\";\nvar exports = {\n\t\".\": {\n\t\ttypes: \"./lib/index.d.ts\",\n\t\t\"import\": \"./lib/index.esm.js\",\n\t\trequire: \"./lib/index.cjs\"\n\t}\n};\nvar scripts = {\n\tbuild: \"rm -rf lib && rollup -c --configPlugin typescript\",\n\tdocs: \"rm -rf docs/ && typedoc && concat-md --decrease-title-levels --dir-name-as-title docs/ > docs/index.md\",\n\t\"lint:check\": \"eslint src/ --ext .ts,.tsx,.js,.jsx --max-warnings 0\",\n\tlint: \"eslint src/ --ext .ts,.tsx,.js,.jsx --fix\",\n\tprepublish: \"npm run build\",\n\t\"preview-docs\": \"npm run docs && comrak --unsafe --gfm -o docs/index.html docs/index.md && open docs/index.html\",\n\t\"publish-docs\": \"npm run docs && mv docs/index.md ../website/src/content/05-02-headless-api-reference.md\",\n\ttest: \"typedoc --emit none\",\n\ttsc: \"tsc\"\n};\nvar author = \"Peter Szerzo <peter@nlx.ai>\";\nvar license = \"MIT\";\nvar devDependencies = {\n\t\"@types/isomorphic-fetch\": \"^0.0.36\",\n\t\"@types/node\": \"^11.15.11\",\n\t\"@types/ramda\": \"0.29.1\",\n\t\"@types/uuid\": \"^9.0.7\",\n\t\"concat-md\": \"^0.5.1\",\n\t\"eslint-config-nlx\": \"*\",\n\tprettier: \"^3.1.0\",\n\t\"rollup-config-nlx\": \"*\",\n\ttypedoc: \"^0.25.13\",\n\t\"typedoc-plugin-markdown\": \"^3.17.1\",\n\ttypescript: \"^5.5.4\"\n};\nvar dependencies = {\n\t\"isomorphic-fetch\": \"^3.0.0\",\n\tramda: \"^0.29.1\",\n\t\"reconnecting-websocket\": \"^4.4.0\",\n\tuuid: \"^9.0.1\"\n};\nvar publishConfig = {\n\taccess: \"public\"\n};\nvar gitHead = \"82bdb85e97d76034a236332b1a58c6c37e729c54\";\nvar packageJson = {\n\tname: name,\n\tversion: version,\n\tdescription: description,\n\ttype: type,\n\tmain: main,\n\tmodule: module,\n\tbrowser: browser,\n\ttypes: types,\n\texports: exports,\n\tscripts: scripts,\n\tauthor: author,\n\tlicense: license,\n\tdevDependencies: devDependencies,\n\tdependencies: dependencies,\n\tpublishConfig: publishConfig,\n\tgitHead: gitHead\n};\n\n// use a custom Console to indicate we really want to log to the console and it's not incidental. `console.log` causes an eslint error\nconst Console = console;\nconst welcomeIntent = \"NLX.Welcome\";\nconst defaultFailureMessage = \"We encountered an issue. Please try again soon.\";\nconst normalizeSlots = (slotsRecordOrArray) => {\n    if (Array.isArray(slotsRecordOrArray)) {\n        return slotsRecordOrArray;\n    }\n    return Object.entries(slotsRecordOrArray).map(([key, value]) => ({\n        slotId: key,\n        value,\n    }));\n};\nconst fromInternal = (internalState) => internalState.responses;\nconst safeJsonParse = (val) => {\n    try {\n        const json = JSON.parse(val);\n        return json;\n    }\n    catch (_err) {\n        return null;\n    }\n};\n/**\n * Helper method to decide when a new {@link Config} requires creating a new {@link ConversationHandler} or whether the old `Config`'s\n * `ConversationHandler` can be used.\n *\n * The order of configs doesn't matter.\n * @param config1 -\n * @param config2 -\n * @returns true if `createConversation` should be called again\n */\nconst shouldReinitialize = (config1, config2) => {\n    return !(0,ramda__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(config1, config2);\n};\n/**\n * Call this to create a conversation handler.\n * @param config -\n * @returns The {@link ConversationHandler} is a bundle of functions to interact with the conversation.\n */\nfunction createConversation(config) {\n    let socket;\n    // Check if the bot URL has a language code appended to it\n    if (/[-|_][a-z]{2,}[-|_][A-Z]{2,}$/.test(config.botUrl)) {\n        Console.warn(\"Since v1.0.0, the language code is no longer added at the end of the bot URL. Please remove the modifier (e.g. '-en-US') from the URL, and specify it in the `languageCode` parameter instead.\");\n    }\n    const initialConversationId = config.conversationId ?? (0,uuid__WEBPACK_IMPORTED_MODULE_3__[\"default\"])();\n    let state = {\n        responses: config.responses ?? [],\n        userId: config.userId,\n        conversationId: initialConversationId,\n    };\n    const setState = (change, \n    // Optionally send the response that causes the current state change, to be sent to subscribers\n    newResponse) => {\n        state = {\n            ...state,\n            ...change,\n        };\n        subscribers.forEach((subscriber) => {\n            subscriber(fromInternal(state), newResponse);\n        });\n    };\n    const failureHandler = () => {\n        const newResponse = {\n            type: \"failure\",\n            receivedAt: new Date().getTime(),\n            payload: {\n                text: config.failureMessage ?? defaultFailureMessage,\n            },\n        };\n        setState({\n            responses: [...state.responses, newResponse],\n        }, newResponse);\n    };\n    const messageResponseHandler = (response) => {\n        if (response?.messages.length > 0) {\n            const newResponse = {\n                type: \"bot\",\n                receivedAt: new Date().getTime(),\n                payload: {\n                    ...response,\n                    messages: response.messages.map((message) => ({\n                        nodeId: message.nodeId,\n                        messageId: message.messageId,\n                        text: message.text,\n                        choices: message.choices ?? [],\n                    })),\n                },\n            };\n            setState({\n                responses: [...state.responses, newResponse],\n            }, newResponse);\n            if (response.metadata.hasPendingDataRequest) {\n                appendStructuredUserResponse({ poll: true });\n                setTimeout(() => {\n                    void sendToBot({\n                        request: {\n                            structured: {\n                                poll: true,\n                            },\n                        },\n                    });\n                }, 1500);\n            }\n        }\n        else {\n            Console.warn(\"Invalid message structure, expected object with field 'messages'.\");\n            failureHandler();\n        }\n    };\n    let botRequestOverride;\n    let socketMessageQueue = [];\n    let socketMessageQueueCheckInterval = null;\n    const sendToBot = async (body) => {\n        if (botRequestOverride != null) {\n            botRequestOverride(body, (payload) => {\n                const newResponse = {\n                    type: \"bot\",\n                    receivedAt: new Date().getTime(),\n                    payload,\n                };\n                setState({\n                    responses: [...state.responses, newResponse],\n                }, newResponse);\n            });\n            return;\n        }\n        const bodyWithContext = {\n            userId: state.userId,\n            conversationId: state.conversationId,\n            ...body,\n            languageCode: config.languageCode,\n            channelType: config.experimental?.channelType,\n            environment: config.environment,\n        };\n        if (isUsingWebSockets()) {\n            if (socket?.readyState === 1) {\n                socket.send(JSON.stringify(bodyWithContext));\n            }\n            else {\n                socketMessageQueue = [...socketMessageQueue, bodyWithContext];\n            }\n        }\n        else {\n            await isomorphic_fetch__WEBPACK_IMPORTED_MODULE_0__(`${config.botUrl}${config.experimental?.completeBotUrl === true\n                ? \"\"\n                : `-${config.languageCode}`}`, {\n                method: \"POST\",\n                headers: {\n                    ...(config.headers ?? {}),\n                    Accept: \"application/json\",\n                    \"Content-Type\": \"application/json\",\n                    \"nlx-sdk-version\": packageJson.version,\n                },\n                body: JSON.stringify(bodyWithContext),\n            })\n                .then(async (res) => {\n                return await res.json();\n            })\n                .then(messageResponseHandler)\n                .catch((err) => {\n                Console.warn(err);\n                failureHandler();\n            });\n        }\n    };\n    const isUsingWebSockets = () => {\n        return config.botUrl.indexOf(\"wss://\") === 0;\n    };\n    let subscribers = [];\n    const setupWebsocket = () => {\n        const url = new URL(config.botUrl);\n        if (config.experimental?.completeBotUrl !== true) {\n            url.searchParams.set(\"languageCode\", config.languageCode);\n            url.searchParams.set(\"channelKey\", `${url.searchParams.get(\"channelKey\") ?? \"\"}-${config.languageCode}`);\n        }\n        url.searchParams.set(\"conversationId\", state.conversationId);\n        socket = new reconnecting_websocket__WEBPACK_IMPORTED_MODULE_1__[\"default\"](url.href);\n        socketMessageQueueCheckInterval = setInterval(() => {\n        }, 500);\n        socket.onmessage = function (e) {\n            if (typeof e?.data === \"string\") {\n                messageResponseHandler(safeJsonParse(e.data));\n            }\n        };\n    };\n    const teardownWebsocket = () => {\n        if (socketMessageQueueCheckInterval != null) {\n            clearInterval(socketMessageQueueCheckInterval);\n        }\n        if (socket != null) {\n            socket.onmessage = null;\n            socket.close();\n            socket = undefined;\n        }\n    };\n    if (isUsingWebSockets()) {\n        setupWebsocket();\n    }\n    const appendStructuredUserResponse = (structured, context) => {\n        const newResponse = {\n            type: \"user\",\n            receivedAt: new Date().getTime(),\n            payload: {\n                type: \"structured\",\n                ...structured,\n                context,\n            },\n        };\n        setState({\n            responses: [...state.responses, newResponse],\n        }, newResponse);\n    };\n    const sendIntent = (intentId, context) => {\n        appendStructuredUserResponse({ intentId }, context);\n        void sendToBot({\n            context,\n            request: {\n                structured: {\n                    intentId,\n                },\n            },\n        });\n    };\n    const sendText = (text, context) => {\n        const newResponse = {\n            type: \"user\",\n            receivedAt: new Date().getTime(),\n            payload: {\n                type: \"text\",\n                text,\n                context,\n            },\n        };\n        setState({\n            responses: [...state.responses, newResponse],\n        }, newResponse);\n        void sendToBot({\n            context,\n            request: {\n                unstructured: {\n                    text,\n                },\n            },\n        });\n    };\n    const unsubscribe = (subscriber) => {\n        subscribers = subscribers.filter((fn) => fn !== subscriber);\n    };\n    const subscribe = (subscriber) => {\n        subscribers = [...subscribers, subscriber];\n        subscriber(fromInternal(state));\n        return () => {\n            unsubscribe(subscriber);\n        };\n    };\n    return {\n        sendText,\n        sendStructured: (structured, context) => {\n            appendStructuredUserResponse(structured, context);\n            void sendToBot({\n                context,\n                request: {\n                    structured: {\n                        ...structured,\n                        slots: normalizeSlots(structured.slots ?? []),\n                    },\n                },\n            });\n        },\n        sendSlots: (slots, context) => {\n            appendStructuredUserResponse({ slots }, context);\n            void sendToBot({\n                context,\n                request: {\n                    structured: {\n                        slots: normalizeSlots(slots),\n                    },\n                },\n            });\n        },\n        sendIntent,\n        sendWelcomeIntent: (context) => {\n            sendIntent(welcomeIntent, context);\n        },\n        sendChoice: (choiceId, context, metadata) => {\n            let newResponses = [...state.responses];\n            const choiceResponse = {\n                type: \"user\",\n                receivedAt: new Date().getTime(),\n                payload: {\n                    type: \"choice\",\n                    choiceId,\n                },\n            };\n            const responseIndex = metadata?.responseIndex ?? -1;\n            const messageIndex = metadata?.messageIndex ?? -1;\n            if (responseIndex > -1 && messageIndex > -1) {\n                newResponses = (0,ramda__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(responseIndex, (response) => response.type === \"bot\"\n                    ? {\n                        ...response,\n                        payload: {\n                            ...response.payload,\n                            messages: (0,ramda__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(messageIndex, (message) => ({ ...message, selectedChoiceId: choiceId }), response.payload.messages),\n                        },\n                    }\n                    : response, newResponses);\n            }\n            newResponses = [...newResponses, choiceResponse];\n            setState({\n                responses: newResponses,\n            }, choiceResponse);\n            void sendToBot({\n                context,\n                request: {\n                    structured: {\n                        nodeId: metadata?.nodeId,\n                        intentId: metadata?.intentId,\n                        choiceId,\n                    },\n                },\n            });\n        },\n        currentConversationId: () => {\n            return state.conversationId;\n        },\n        subscribe,\n        unsubscribe,\n        unsubscribeAll: () => {\n            subscribers = [];\n        },\n        reset: (options) => {\n            setState({\n                conversationId: (0,uuid__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(),\n                responses: options?.clearResponses === true ? [] : state.responses,\n            });\n            if (isUsingWebSockets()) {\n                teardownWebsocket();\n                setupWebsocket();\n            }\n        },\n        destroy: () => {\n            subscribers = [];\n            if (isUsingWebSockets()) {\n                teardownWebsocket();\n            }\n        },\n        setBotRequestOverride: (val) => {\n            botRequestOverride = val;\n        },\n    };\n}\n/**\n * Get current expiration timestamp from the current list of reponses\n * @param responses - the current list of user and bot responses (first argument in the subscribe callback)\n * @returns an expiration timestamp in Unix Epoch (`new Date().getTime()`), or `null` if this is not known (typically occurs if the bot has not responded yet)\n */\nconst getCurrentExpirationTimestamp = (responses) => {\n    let expirationTimestamp = null;\n    responses.forEach((response) => {\n        if (response.type === \"bot\" &&\n            response.payload.expirationTimestamp != null) {\n            expirationTimestamp = response.payload.expirationTimestamp;\n        }\n    });\n    return expirationTimestamp;\n};\n/**\n * This package is intentionally designed with a subscription-based API as opposed to a promise-based one where each message corresponds to a single bot response, available asynchronously.\n *\n * If you need a promise-based wrapper, you can use the `promisify` helper available in the package:\n * @example\n * ```typescript\n * import { createConversation, promisify } from \"@nlxai/chat-core\";\n *\n * const convo = createConversation(config);\n *\n * const sendTextWrapped = promisify(convo.sendText, convo);\n *\n * sendTextWrapped(\"Hello\").then((response) => {\n *   console.log(response);\n * });\n * ```\n * @typeParam T - the type of the function's params, e.g. for `sendText` it's `text: string, context?: Context`\n * @param fn - the function to wrap (e.g. `convo.sendText`, `convo.sendChoice`, etc.)\n * @param convo - the `ConversationHandler` (from {@link createConversation})\n * @param timeout - the timeout in milliseconds\n * @returns A promise-wrapped version of the function. The function, when called, returns a promise that resolves to the Conversation's next response.\n */\nfunction promisify(fn, convo, timeout = 10000) {\n    return async (payload) => {\n        return await new Promise((resolve, reject) => {\n            const timeoutId = setTimeout(() => {\n                reject(new Error(\"The request timed out.\"));\n                convo.unsubscribe(subscription);\n            }, timeout);\n            const subscription = (_responses, newResponse) => {\n                if (newResponse?.type === \"bot\" || newResponse?.type === \"failure\") {\n                    clearTimeout(timeoutId);\n                    convo.unsubscribe(subscription);\n                    resolve(newResponse);\n                }\n            };\n            convo.subscribe(subscription);\n            fn(payload);\n        });\n    };\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@nlxai/chat-core/lib/index.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@nlxai/chat-react/lib/index.esm.js":
/*!*********************************************************!*\
  !*** ./node_modules/@nlxai/chat-react/lib/index.esm.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ useChat),\n/* harmony export */   useChat: () => (/* binding */ useChat)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var ramda__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ramda */ \"(ssr)/./node_modules/ramda/es/last.js\");\n/* harmony import */ var _nlxai_chat_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @nlxai/chat-core */ \"(ssr)/./node_modules/@nlxai/chat-core/lib/index.esm.js\");\n\n\n\n\n/**\n * A [custom hook](https://react.dev/learn/reusing-logic-with-custom-hooks)\n * used to create fully custom chat widgets for web and mobile.\n * @param config - The configuration object for the chatbot.\n * @returns the hook object containing the chat state and methods.\n */\nconst useChat = (config) => {\n    const prevConversationHandler = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const prevConfig = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        prevConfig.current = config;\n    }, [config]);\n    const conversationHandler = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n        // Prevent re-initialization if backend-related props have not changed\n        if (prevConfig.current != null &&\n            prevConversationHandler.current != null &&\n            !(0,_nlxai_chat_core__WEBPACK_IMPORTED_MODULE_1__.shouldReinitialize)(prevConfig.current, config)) {\n            return prevConversationHandler.current;\n        }\n        const newHandler = (0,_nlxai_chat_core__WEBPACK_IMPORTED_MODULE_1__.createConversation)(config);\n        prevConversationHandler.current = newHandler;\n        return newHandler;\n    }, [config]);\n    const [responses, setResponses] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(config.responses ?? []);\n    const [inputValue, setInputValue] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"\");\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        conversationHandler.subscribe(setResponses);\n        return () => {\n            conversationHandler.destroy();\n        };\n    }, [conversationHandler]);\n    const lastMessage = (0,ramda__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(responses);\n    const isWaiting = lastMessage?.type === \"user\";\n    return {\n        conversationHandler,\n        inputValue,\n        responses,\n        waiting: isWaiting,\n        setInputValue,\n    };\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG5seGFpL2NoYXQtcmVhY3QvbGliL2luZGV4LmVzbS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUE2RDtBQUNoQztBQUM2Qzs7QUFFMUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0MsNkNBQU07QUFDMUMsdUJBQXVCLDZDQUFNO0FBQzdCLElBQUksZ0RBQVM7QUFDYjtBQUNBLEtBQUs7QUFDTCxnQ0FBZ0MsOENBQU87QUFDdkM7QUFDQTtBQUNBO0FBQ0EsYUFBYSxvRUFBa0I7QUFDL0I7QUFDQTtBQUNBLDJCQUEyQixvRUFBa0I7QUFDN0M7QUFDQTtBQUNBLEtBQUs7QUFDTCxzQ0FBc0MsK0NBQVE7QUFDOUMsd0NBQXdDLCtDQUFRO0FBQ2hELElBQUksZ0RBQVM7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCx3QkFBd0IsaURBQUk7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUV1QyIsInNvdXJjZXMiOlsid2VicGFjazovL21hbnRpbmUtbWluaW1hbC1uZXh0LXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL0BubHhhaS9jaGF0LXJlYWN0L2xpYi9pbmRleC5lc20uanM/MzRkYyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VSZWYsIHVzZUVmZmVjdCwgdXNlTWVtbywgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBsYXN0IH0gZnJvbSAncmFtZGEnO1xuaW1wb3J0IHsgc2hvdWxkUmVpbml0aWFsaXplLCBjcmVhdGVDb252ZXJzYXRpb24gfSBmcm9tICdAbmx4YWkvY2hhdC1jb3JlJztcblxuLyoqXG4gKiBBIFtjdXN0b20gaG9va10oaHR0cHM6Ly9yZWFjdC5kZXYvbGVhcm4vcmV1c2luZy1sb2dpYy13aXRoLWN1c3RvbS1ob29rcylcbiAqIHVzZWQgdG8gY3JlYXRlIGZ1bGx5IGN1c3RvbSBjaGF0IHdpZGdldHMgZm9yIHdlYiBhbmQgbW9iaWxlLlxuICogQHBhcmFtIGNvbmZpZyAtIFRoZSBjb25maWd1cmF0aW9uIG9iamVjdCBmb3IgdGhlIGNoYXRib3QuXG4gKiBAcmV0dXJucyB0aGUgaG9vayBvYmplY3QgY29udGFpbmluZyB0aGUgY2hhdCBzdGF0ZSBhbmQgbWV0aG9kcy5cbiAqL1xuY29uc3QgdXNlQ2hhdCA9IChjb25maWcpID0+IHtcbiAgICBjb25zdCBwcmV2Q29udmVyc2F0aW9uSGFuZGxlciA9IHVzZVJlZihudWxsKTtcbiAgICBjb25zdCBwcmV2Q29uZmlnID0gdXNlUmVmKG51bGwpO1xuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIHByZXZDb25maWcuY3VycmVudCA9IGNvbmZpZztcbiAgICB9LCBbY29uZmlnXSk7XG4gICAgY29uc3QgY29udmVyc2F0aW9uSGFuZGxlciA9IHVzZU1lbW8oKCkgPT4ge1xuICAgICAgICAvLyBQcmV2ZW50IHJlLWluaXRpYWxpemF0aW9uIGlmIGJhY2tlbmQtcmVsYXRlZCBwcm9wcyBoYXZlIG5vdCBjaGFuZ2VkXG4gICAgICAgIGlmIChwcmV2Q29uZmlnLmN1cnJlbnQgIT0gbnVsbCAmJlxuICAgICAgICAgICAgcHJldkNvbnZlcnNhdGlvbkhhbmRsZXIuY3VycmVudCAhPSBudWxsICYmXG4gICAgICAgICAgICAhc2hvdWxkUmVpbml0aWFsaXplKHByZXZDb25maWcuY3VycmVudCwgY29uZmlnKSkge1xuICAgICAgICAgICAgcmV0dXJuIHByZXZDb252ZXJzYXRpb25IYW5kbGVyLmN1cnJlbnQ7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbmV3SGFuZGxlciA9IGNyZWF0ZUNvbnZlcnNhdGlvbihjb25maWcpO1xuICAgICAgICBwcmV2Q29udmVyc2F0aW9uSGFuZGxlci5jdXJyZW50ID0gbmV3SGFuZGxlcjtcbiAgICAgICAgcmV0dXJuIG5ld0hhbmRsZXI7XG4gICAgfSwgW2NvbmZpZ10pO1xuICAgIGNvbnN0IFtyZXNwb25zZXMsIHNldFJlc3BvbnNlc10gPSB1c2VTdGF0ZShjb25maWcucmVzcG9uc2VzID8/IFtdKTtcbiAgICBjb25zdCBbaW5wdXRWYWx1ZSwgc2V0SW5wdXRWYWx1ZV0gPSB1c2VTdGF0ZShcIlwiKTtcbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBjb252ZXJzYXRpb25IYW5kbGVyLnN1YnNjcmliZShzZXRSZXNwb25zZXMpO1xuICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgY29udmVyc2F0aW9uSGFuZGxlci5kZXN0cm95KCk7XG4gICAgICAgIH07XG4gICAgfSwgW2NvbnZlcnNhdGlvbkhhbmRsZXJdKTtcbiAgICBjb25zdCBsYXN0TWVzc2FnZSA9IGxhc3QocmVzcG9uc2VzKTtcbiAgICBjb25zdCBpc1dhaXRpbmcgPSBsYXN0TWVzc2FnZT8udHlwZSA9PT0gXCJ1c2VyXCI7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgY29udmVyc2F0aW9uSGFuZGxlcixcbiAgICAgICAgaW5wdXRWYWx1ZSxcbiAgICAgICAgcmVzcG9uc2VzLFxuICAgICAgICB3YWl0aW5nOiBpc1dhaXRpbmcsXG4gICAgICAgIHNldElucHV0VmFsdWUsXG4gICAgfTtcbn07XG5cbmV4cG9ydCB7IHVzZUNoYXQgYXMgZGVmYXVsdCwgdXNlQ2hhdCB9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@nlxai/chat-react/lib/index.esm.js\n");

/***/ })

};
;